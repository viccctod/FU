import pandas as pd
from scipy.optimize import linprog
import numpy as np

profit = [] #создание списка со значениями прибыли
for element in input('введите значения прибыли через пробел: ').split():
    profit.append(int(element))

ogran = [] #создание списка с ограничениями по запасам
for element in input('введите ограничения по запасам через пробел: ').split():
    ogran.append(int(element))

#создание матрицы и её заполнение элементами через пользовательский ввод    
n=int(input("введите количество видов сырья: ")) #определение количества строк матрицы
m=int(input("введите количество видов продукции: ")) #определение количества столбцов матрицы
a = [ [0] * m for i in range(n) ]
for i in range (n):
    for j in range(m):
        print("введите элемент матрицы через enter:")
        a[i][j] = int(input())
print(np.matrix(a)) #вывод матрицы


               
opt = linprog(c=profit, A_ub=a, b_ub=ogran,
              method="revised simplex")

opt

#linprog() возвращает структуру данных со следующими атрибутами:
#.con – остатки ограничения-равенства;
#.fun – оптимальное значение целевой функции
#.message – словесный статус решения
#.nit – количество итераций, необходимых для завершения расчета
#.slack – значения дополнительных переменных – разниц между значениями левой и правой сторонами ограничений
#.status – целое число от 0 до 4, отражающих результат решения: например, 0, когда было найдено оптимальное решение;
#.success – логическое значение, показывающее, найдено ли оптимальное решение
#.x – массив NumPy, содержащий оптимальные значения переменных решения
